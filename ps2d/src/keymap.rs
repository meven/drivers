pub mod english {
    static ENGLISH: [[char; 2]; 58] = [
        ['\0', '\0'],
        ['\x1B', '\x1B'],
        ['1', '!'],
        ['2', '@'],
        ['3', '#'],
        ['4', '$'],
        ['5', '%'],
        ['6', '^'],
        ['7', '&'],
        ['8', '*'],
        ['9', '('],
        ['0', ')'],
        ['-', '_'],
        ['=', '+'],
        ['\x7F', '\x7F'],
        ['\t', '\t'],
        ['q', 'Q'],
        ['w', 'W'],
        ['e', 'E'],
        ['r', 'R'],
        ['t', 'T'],
        ['y', 'Y'],
        ['u', 'U'],
        ['i', 'I'],
        ['o', 'O'],
        ['p', 'P'],
        ['[', '{'],
        [']', '}'],
        ['\n', '\n'],
        ['\0', '\0'],
        ['a', 'A'],
        ['s', 'S'],
        ['d', 'D'],
        ['f', 'F'],
        ['g', 'G'],
        ['h', 'H'],
        ['j', 'J'],
        ['k', 'K'],
        ['l', 'L'],
        [';', ':'],
        ['\'', '"'],
        ['`', '~'],
        ['\0', '\0'],
        ['\\', '|'],
        ['z', 'Z'],
        ['x', 'X'],
        ['c', 'C'],
        ['v', 'V'],
        ['b', 'B'],
        ['n', 'N'],
        ['m', 'M'],
        [',', '<'],
        ['.', '>'],
        ['/', '?'],
        ['\0', '\0'],
        ['\0', '\0'],
        ['\0', '\0'],
        [' ', ' ']
    ];

    pub fn get_char(scancode: u8, shift: bool, alt_gr: bool) -> char {
        if !alt_gr {
            if let Some(c) = ENGLISH.get(scancode as usize) {
                if shift {
                    return c[1];
                } else {
                    return c[0];
                }
            }
        }
        '\0'
    }
}
pub mod dvorak {
    static DVORAK: [[char; 2]; 58] = [
        ['\0', '\0'],
        ['\x1B', '\x1B'],
        ['1', '!'],
        ['2', '@'],
        ['3', '#'],
        ['4', '$'],
        ['5', '%'],
        ['6', '^'],
        ['7', '&'],
        ['8', '*'],
        ['9', '('],
        ['0', ')'],
        ['[', '{'],
        [']', '}'],
        ['\x7F', '\x7F'],
        ['\t', '\t'],
        ['\'', '"'],
        [',', '<'],
        ['.', '>'],
        ['p', 'P'],
        ['y', 'Y'],
        ['f', 'F'],
        ['g', 'G'],
        ['c', 'C'],
        ['r', 'R'],
        ['l', 'L'],
        ['/', '?'],
        ['=', '+'],
        ['\n', '\n'],
        ['\0', '\0'],
        ['a', 'A'],
        ['o', 'O'],
        ['e', 'E'],
        ['u', 'U'],
        ['i', 'I'],
        ['d', 'D'],
        ['h', 'H'],
        ['t', 'T'],
        ['n', 'N'],
        ['s', 'S'],
        ['-', '_'],
        ['`', '~'],
        ['\0', '\0'],
        ['\\', '|'],
        [';', ':'],
        ['q', 'Q'],
        ['j', 'J'],
        ['k', 'K'],
        ['x', 'X'],
        ['b', 'B'],
        ['m', 'M'],
        ['w', 'W'],
        ['v', 'V'],
        ['z', 'Z'],
        ['\0', '\0'],
        ['\0', '\0'],
        ['\0', '\0'],
        [' ', ' ']
    ];

    pub fn get_char(scancode: u8, shift: bool, alt_gr: bool) -> char {
        if !alt_gr {
            if let Some(c) = DVORAK.get(scancode as usize) {
                if shift {
                    return c[1];
                } else {
                    return c[0];
                }
            }
        }
        '\0'
    }
}

pub mod azerty {
    static AZERTY: [[char; 2]; 58] = [
        ['\0', '\0'],
        ['\x1B', '\x1B'],
        ['&', '1'],
        ['é', '2'],
        ['"', '3'],
        ['\'', '4'],
        ['(', '5'],
        ['|', '6'],
        ['è', '7'],
        ['_', '8'],
        ['ç', '9'],
        ['à', '0'],
        [')', '°'],
        ['=', '+'],
        ['\x7F', '\x7F'],
        ['\t', '\t'],
        ['a', 'A'],
        ['z', 'Z'],
        ['e', 'E'],
        ['r', 'R'],
        ['t', 'T'],
        ['y', 'Y'],
        ['u', 'U'],
        ['i', 'I'],
        ['o', 'O'],
        ['p', 'P'],
        ['^', '¨'],
        ['$', '£'],
        ['\n', '\n'],
        ['\0', '\0'],
        ['q', 'Q'],
        ['s', 'S'],
        ['d', 'D'],
        ['f', 'F'],
        ['g', 'G'],
        ['h', 'H'],
        ['j', 'J'],
        ['k', 'K'],
        ['l', 'L'],
        ['m', 'M'],
        ['ù', '%'],
        ['*', 'µ'],
        ['\0', '\0'],
        ['ê', 'Ê'],
        ['w', 'W'],
        ['x', 'X'],
        ['c', 'C'],
        ['v', 'V'],
        ['b', 'B'],
        ['n', 'N'],
        [',', '?'],
        [';', '.'],
        [':', '/'],
        ['!', '§'],
        ['\0', '\0'],
        ['\0', '\0'],
        ['\0', '\0'],
        [' ', ' ']
    ];

    pub fn get_char(scancode: u8, shift: bool, alt_gr: bool) -> char {
        if !alt_gr {
            if let Some(c) = AZERTY.get(scancode as usize) {
                if shift {
                    return c[1];
                } else {
                    return c[0];
                }
            }
        }
        '\0'
    }
}

pub mod bepo {
    static BEPO: [[char; 3]; 58] = [
        ['\0', '\0', '\0'],
        ['$', '#', '–'],
        ['"', '1', '—'],
        ['«', '2', '<'],
        ['»', '3', '>'],
        ['(', '4', '['],
        [')', '5', ']'],
        ['@', '6', '^'],
        ['+', '7', '±'],
        ['-', '8', '−'],
        ['/', '9', '÷'],
        ['*', '0', '×'],
        ['=', '°', '≠'],
        ['%', '`', '‰'],
        ['\x7F', '\x7F', '\0'],
        ['\t', '\t', '\0'],
        ['b', 'B', '|'],
        ['é', 'É', '´'],
        ['p', 'P', '&'],
        ['o', 'O', 'œ'],
        ['è', 'È', '`'],
        ['^', '!', '¡'],
        ['v', 'V', 'ˇ'],
        ['d', 'D', '\0'],
        ['l', 'L', '\0'],
        ['j', 'J', '\0'],
        ['z', 'Z', '\0'],
        ['w', 'W', '\0'],
        ['\n', '\n', '\0'],
        ['\0', '\0', '\0'],
        ['a', 'A', 'æ'],
        ['u', 'U', 'ù'],
        ['i', 'I', '¨'],
        ['e', 'E', '€'],
        [',', ';', '’'],
        ['c', 'C', '©'],
        ['t', 'T', '\0'],
        ['s', 'S', '\0'],
        ['r', 'R', '\0'],
        ['n', 'N', '\0'],
        ['m', 'M', '\0'],
        ['ç', 'Ç', '\0'],
        ['\0', '\0', '\0'],
        ['ê', 'Ê', '\0'],
        ['à', 'À', '\\'],
        ['y', 'Y', '{'],
        ['x', 'X', '}'],
        ['.', ':', '…'],
        ['k', 'K', '~'],
        ['\'', '?', '¿'],
        ['q', 'Q', '\0'],
        ['g', 'G', '\0'],
        ['h', 'H', '\0'],
        ['f', 'F', '\0'],
        ['\0', '\0', '\0'],
        ['\0', '\0', '\0'],
        ['\0', '\0', '\0'],
        [' ', ' ', '_'],
    ];

    pub fn get_char(scancode: u8, shift: bool, alt_gr: bool) -> char {
        if let Some(c) = BEPO.get(scancode as usize) {
            if shift {
                c[1]
            } else if alt_gr {
                c[2]
            } else {
                c[0]
            }
        } else {
            '\0'
        }
    }
}

